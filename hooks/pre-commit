#!/bin/sh

# Flag to track if any formatting changes were made
FORMATTING_CHANGES_DETECTED=0

# Run Dart format check
echo "Running Dart format check..."
dart format --line-length 120 $(find . -name "*.dart" -not -path "./lib/l10n/generated/*")

# Check for Kotlin files (Android)
if [ -d "android" ]; then
  echo "Running Kotlin auto-formatting..."
  
  # Check for ktlint installation
  if ! ktlint --version > /dev/null 2>&1; then
    echo "ktlint not found or not working. Please install it with: 'curl -sSLO https://github.com/pinterest/ktlint/releases/download/1.0.0/ktlint && chmod a+x ktlint && sudo mv ktlint /usr/local/bin/'"
    echo "Skipping Kotlin auto-formatting."
  else
    # Run ktlint with format flag
    ktlint --format "android/**/*.kt" "android/**/*.kts"
  fi
fi

# Function to run SwiftLint on a directory
run_swiftlint_for_directory() {
  dir_name=$1
  platform_name=$2
  
  echo "Running Swift auto-formatting for $platform_name..."
  
  # Check for swiftlint installation
  if ! swiftlint version &> /dev/null; then
    echo "swiftlint not found or not working. Please install it with 'brew install swiftlint'"
    echo "Skipping Swift auto-formatting for $platform_name."
    return 0
  fi
  
  # Run swiftlint with autocorrect first
  cd "$dir_name"
  swiftlint --config .swiftlint.yml --autocorrect
  
  # Now run swiftlint again without autocorrect to check for warnings
  echo "Checking for SwiftLint warnings in $platform_name..."
  swiftlint --config .swiftlint.yml
  SWIFTLINT_RESULT=$?
  
  # Check for SwiftLint errors or warnings
  if [ $SWIFTLINT_RESULT -ne 0 ]; then
    echo "SwiftLint detected warnings or errors in $platform_name that cannot be automatically fixed. Please address these issues before committing."
    cd ..
    return 1  # Return with error
  fi
  
  cd ..
  return 0  # Return success
}

# Check for Swift files (iOS)
SWIFT_LINT_FAILED=0
if [ -d "ios" ]; then
  run_swiftlint_for_directory "ios" "iOS"
  if [ $? -ne 0 ]; then
    SWIFT_LINT_FAILED=1
  fi
fi

# Check for Swift files (macOS)
if [ -d "macos" ]; then
  run_swiftlint_for_directory "macos" "macOS"
  if [ $? -ne 0 ]; then
    SWIFT_LINT_FAILED=1
  fi
fi

# Check for C++ files
CPP_LINT_FAILED=0
if [ -d "cpp" ] || find . -name "*.cpp" -o -name "*.h" -o -name "*.cc" -o -name "*.hpp" | grep -q .; then
  echo "Running C++ auto-formatting with clang-format..."
  
  # Check for clang-format installation
  if ! command -v clang-format > /dev/null 2>&1; then
    echo "clang-format not found. Please install it with: 'sudo apt-get install clang-format' or equivalent for your OS"
    echo "Skipping C++ auto-formatting."
  else
    # Find C++ files, excluding certain build and library directories
    CPP_FILES=$(find . \( -name "*.cpp" -o -name "*.h" -o -name "*.cc" -o -name "*.hpp" \) \
      -not -path "./build/*" \
      -not -path "./.dart_tool/*" \
      -not -path "./ios/*" \
      -not -path "./macos/*" \
      -not -path "./android/*" \
      -not -path "./example/*" \
      -not -path "./onnxruntime_download/*" -print)

    if [ -n "$CPP_FILES" ]; then
      # Run clang-format on the found files
      echo "$CPP_FILES" | xargs clang-format -i --style=file
      
      if [ $? -ne 0 ]; then
        echo "C++ auto-formatting failed. Please check the output above."
        CPP_LINT_FAILED=1
      fi
    else
      echo "No general C++ files found to format."
    fi
  fi
fi

# Check for CMakeLists.txt files
CMAKE_LINT_FAILED=0
if find . -name "CMakeLists.txt" -not -path "./build/*" -not -path "./.dart_tool/*" -not -path "./example/build/*" | grep -q .; then
  echo "Running CMake auto-formatting with cmake-format..."

  # Check for cmake-format installation
  if ! command -v cmake-format > /dev/null 2>&1; then
    echo "cmake-format not found. Please install it with: 'pip install cmake-format'"
    echo "Skipping CMake auto-formatting."
  else
    # Find CMakeLists.txt files, excluding build directories
    CMAKE_FILES=$(find . -name "CMakeLists.txt" \
      -not -path "./build/*" \
      -not -path "./.dart_tool/*" \
      -not -path "./example/build/*" \
      -not -path "./onnxruntime_download/*" -print)

    if [ -n "$CMAKE_FILES" ]; then
      # Run cmake-format on the found files
      echo "$CMAKE_FILES" | xargs cmake-format -i

      if [ $? -ne 0 ]; then
        echo "CMake auto-formatting failed. Please check the output above."
        CMAKE_LINT_FAILED=1
      fi
    else
      echo "No CMakeLists.txt files found to format."
    fi
  fi
fi

# Run Flutter analyze
echo "Running Flutter analyze..."
flutter analyze lib test example/lib
FLUTTER_ANALYZE_RESULT=$?

# Now check for any modified files after all formatting has been done
if ! git diff --quiet; then
  echo "Formatting changes detected. Please add the formatted files to your commit:"
  git diff --name-only
  FORMATTING_CHANGES_DETECTED=1
fi

# Check if any linting failed
if [ $SWIFT_LINT_FAILED -ne 0 ] || [ $CPP_LINT_FAILED -ne 0 ] || [ $CMAKE_LINT_FAILED -ne 0 ] || [ $FLUTTER_ANALYZE_RESULT -ne 0 ] || [ $FORMATTING_CHANGES_DETECTED -ne 0 ]; then
  if [ $FORMATTING_CHANGES_DETECTED -ne 0 ]; then
    echo "Please add the formatted files to your commit."
  fi
  if [ $SWIFT_LINT_FAILED -ne 0 ] || [ $CPP_LINT_FAILED -ne 0 ] || [ $CMAKE_LINT_FAILED -ne 0 ] || [ $FLUTTER_ANALYZE_RESULT -ne 0 ]; then
    echo "Please fix the linting issues before committing."
  fi
  exit 1
fi

# If we got here, all checks passed
echo "All format checks and analyses passed."
exit 0

